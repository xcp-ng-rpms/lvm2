# HG changeset patch
# Parent 7b8ebdb0f36facb7a22564dd0da5247f2d97d459
Only scan the Phisical device passed with LVM_DEVICE env var

Whith this, if LVM_DEVICE env variable is set, only the pysical
device present in the dir will be scanned. This will speed up a lot lvm
commands when there are many LVs.

This will need an equivalent patch to SM to set the environment variable.

This patch was included in previous versions of XenServer.

From: Stefano Panella <Stefano.Panella@citrix.com>

Signed-off-by: Stefano Panella <stefano.panella@citrix.com>
Reviewed-by: Germano Percossi <germano.percossi@citrix.com>

diff --git a/lib/commands/toolcontext.c b/lib/commands/toolcontext.c
--- a/lib/commands/toolcontext.c
+++ b/lib/commands/toolcontext.c
@@ -1015,7 +1015,7 @@ static int _init_filters(struct cmd_cont
 
 	if (!*cmd->system_dir)
 		cmd->dump_filter = 0;
-
+#if 0
 	/*
 	 * Only load persistent filter device cache on startup if it is newer
 	 * than the config file and this is not a long-lived process. Also avoid
@@ -1253,6 +1253,8 @@
 			log_verbose("Failed to load existing device cache from %s",
 				    dev_cache);
 	}
+#endif
+	persistent_filter_load(cmd->filter, NULL);
 
 	cmd->initialized.filters = 1;
 	return 1;
diff --git a/lib/filters/filter-persistent.c b/lib/filters/filter-persistent.c
--- a/lib/filters/filter-persistent.c
+++ b/lib/filters/filter-persistent.c
@@ -17,6 +17,7 @@
 #include "filter.h"
 #include "config.h"
 #include "lvm-file.h"
+#include <dirent.h>
 
 struct pfilter {
 	char *file;
@@ -33,6 +34,8 @@ struct pfilter {
 #define PF_BAD_DEVICE ((void *) 1)
 #define PF_GOOD_DEVICE ((void *) 2)
 
+static int _from_env = 0;
+
 static int _init_hash(struct pfilter *pf)
 {
 	if (pf->devices)
@@ -87,12 +90,75 @@ static int _read_array(struct pfilter *p
 	return 1;
 }
 
+static char *_join(const char *dir, const char *name)
+{
+	size_t len = strlen(dir) + strlen(name) + 2;
+	char *r = dm_malloc(len);
+	if (r)
+		snprintf(r, len, "%s/%s", dir, name);
+	return r;
+}
+
+/*
+ * Get rid of extra slashes in the path string.
+ */
+static void _collapse_slashes(char *str)
+{
+	char *ptr;
+	int was_slash = 0;
+	for (ptr = str; *ptr; ptr++) {
+		if (*ptr == '/') {
+			if (was_slash)
+				continue;	
+			was_slash = 1;
+		} else
+			was_slash = 0;
+		*str++ = *ptr;
+	}
+	*str = *ptr;
+}
+
 int persistent_filter_load(struct dev_filter *f, struct dm_config_tree **cft_out)
 {
 	struct pfilter *pf = (struct pfilter *) f->private;
 	struct dm_config_tree *cft;
 	struct stat info;
 	int r = 0;
+	int n, dirent_count;
+	struct dirent **dirent;
+	char *path;
+	char *envdir = getenv("LVM_DEVICE");
+
+	if(!cft_out && envdir) {
+		dirent_count = scandir(envdir, &dirent, NULL, alphasort);
+		if (dirent_count > 0) {
+			for (n = 0; n < dirent_count; n++) {
+				if (dirent[n]->d_name[0] == '.') {
+					free(dirent[n]);
+					continue;
+				}
+
+				if (!(path = _join(envdir, dirent[n]->d_name)))
+					return_0;
+
+				_collapse_slashes(path);
+				if(dm_hash_insert(pf->devices, path,
+						  PF_GOOD_DEVICE)) {
+					dev_cache_get(path, NULL);
+				}
+				dm_free(path);
+				free(dirent[n]);
+			}
+			free(dirent);
+		}
+
+		if (dm_hash_get_num_entries(pf->devices)) {
+			/* We populated dev_cache ourselves */
+			dev_cache_scan(0);
+			_from_env = 1;
+			return 1;
+		}
+	}
 
 	if (obtain_device_list_from_udev()) {
 		if (!stat(pf->file, &info)) {
@@ -182,6 +248,10 @@ static int _persistent_filter_dump(struc
 	int lockfd;
 	int r = 0;
 
+	if(_from_env) {
+		return 1;
+	}
+
 	if (obtain_device_list_from_udev())
 		return 1;
 
